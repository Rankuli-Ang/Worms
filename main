import random

# Переменные (я так понимаю что выносить их таким образом не совсем корректно)
Health = 0
Damage = 0
Defense = 0
Initiative = 0
Experience = 0
Level = 0

number_of_battles = 0
level_up_variations = ['damage', 'defense', 'initiative']
level_up_value = 0


# Корпус червей


class Worm:
    def __init__(self, name: str):
        self.name: str = name
        self.health: Health = random.randint(6, 12)
        self.damage: Damage = random.randint(1, 3)
        self.defense: Defense = random.uniform(0.5, 1.0)
        self.initiative: Initiative = random.randint(1, 10)
        self.experience: Experience = 0
        self.level: Level = 1

    def describe(self) -> None:
        print(f'Worm {self.name}:')
        print(f'\thealth {self.health}')
        print(f'\tdamage {self.damage}')
        print(f'\tdefense {self.defense}')
        print(f'\tinitiative {self.initiative}')
        print(f'\tlevel {self.level}')
        print(f'\texperience {self.experience}')


class Hydralisk(Worm):
    def __init__(self, name: str):
        super().__init__(name)


# Методы


def strike(self, other):
    other.health = other.health - self.damage * other.defense
    return other.health


def death(self):
    if self.health <= 0:
        return worms.remove(self)


def level_up_damage(self):
    self.damage += 2
    self.health += 5


def level_up_defense(self):
    self.defense -= 0.05
    self.health += 5


def level_up_initiative(self):
    self.initiative += 1
    self.health += 5


def level_up(self):
    if self.experience >= 3:
        self.level += 1
        self.experience = 0
        level_up_value = random.choice(level_up_variations)
        if level_up_value == level_up_variations[0]:
            level_up_damage(self)
        elif level_up_value == level_up_variations[1]:
            level_up_defense(self)
        else:
            level_up_initiative(self)


def battle_round(self, other):
    global number_of_battles
    number_of_battles = number_of_battles + 1
    if self.initiative >= other.initiative:

        strike(self, other)
        self.experience += 1
        level_up(self)
        death(other)

        strike(other, self)
        other.experience += 1
        level_up(other)
        death(self)

    else:

        strike(other, self)
        other.experience += 1
        level_up(other)
        death(self)

        strike(self, other)
        self.experience += 1
        level_up(self)
        death(other)


# Тело программы
worms = [Worm(f'worm{i}') for i in range(1, 21)]

warrior1 = random.choice(worms)
warrior2 = random.choice(worms)

while len(worms) > 1:
    try:
        warrior1 = random.choice(worms)
        warrior2 = random.choice(worms)
    except IndexError:
        break
    if warrior1 != warrior2:
        battle_round(warrior1, warrior2)
    else:
        continue

print('Number of battles:')
print(number_of_battles)

if len(worms) == 1:
    print(describe(worms[0]))
else:
    print('All is dead!')

print(len(worms))
